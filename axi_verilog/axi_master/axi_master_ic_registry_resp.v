//------------------------------------------------------------------
//-- File generated by RobustVerilog parser
//-- RobustVerilog version 1.5g (limited free version) Jul 5 2011
//-- Invoked Wed Mar 28 12:55:32 2012
//-- Source file: ic_registry_resp.v
//-- Parent file: ic_resp.v
//-- Project directory: C:/Users/MARIOS/Desktop/VLSI/RobustVerilog_free1.5_win/RobustVerilog_free1.5_win/examples/axi_master/trunk/run/
//-- Target directory: out/
//-- Command flags: ..\..\..\..\robust.exe ../robust_axi_master.pro -gui 
//-- www.provartec.com/edatools ... info@provartec.com
//------------------------------------------------------------------





  
module axi_master_ic_registry_resp(clk,reset,M0_ASLV,M0_AID,M0_AVALID,M0_AREADY,M1_ASLV,M1_AID,M1_AVALID,M1_AREADY,M2_ASLV,M2_AID,M2_AVALID,M2_AREADY,S0_ID,S0_VALID,S0_READY,S0_LAST,S0_MSTR,S0_OK);
   
   input                 clk;
   input                 reset;

   input [1-1:0]                  M0_ASLV;
   input [3:0]          M0_AID;
   input                M0_AVALID;
   input                M0_AREADY;
   input [1-1:0]                  M1_ASLV;
   input [3:0]          M1_AID;
   input                M1_AVALID;
   input                M1_AREADY;
   input [1-1:0]                  M2_ASLV;
   input [3:0]          M2_AID;
   input                M2_AVALID;
   input                M2_AREADY;
   
   input [4-1:0]              S0_ID;
   input                 S0_VALID; 
   input                 S0_READY; 
   input                 S0_LAST; 
   output [2-1:0]           S0_MSTR;
   output                 S0_OK;


   wire                             Amatch_M0_ID0;
   wire                             Amatch_M1_ID0;
   wire                             Amatch_M2_ID0;
   
   wire                 match_S0_M0_ID0;
   wire                 match_S0_M1_ID0;
   wire                 match_S0_M2_ID0;
   wire                 no_Amatch_M0;
   wire                 no_Amatch_M1;
   wire                 no_Amatch_M2;
   
   wire                 cmd_push_M0;
   wire                 cmd_push_M1;
   wire                 cmd_push_M2;
   wire                 cmd_push_M0_ID0;
   wire                 cmd_push_M1_ID0;
   wire                 cmd_push_M2_ID0;
   
   wire                 cmd_pop_S0;
   wire                 cmd_pop_M0_ID0;
   wire                 cmd_pop_M1_ID0;
   wire                 cmd_pop_M2_ID0;

   wire [1-1:0]              slave_in_M0_ID0;
   wire [1-1:0]              slave_in_M1_ID0;
   wire [1-1:0]              slave_in_M2_ID0;
   wire [1-1:0]              slave_out_M0_ID0;
   wire [1-1:0]              slave_out_M1_ID0;
   wire [1-1:0]              slave_out_M2_ID0;
   wire                 slave_empty_M0_ID0;
   wire                 slave_empty_M1_ID0;
   wire                 slave_empty_M2_ID0;
   wire                 slave_full_M0_ID0;
   wire                 slave_full_M1_ID0;
   wire                 slave_full_M2_ID0;

   reg [2-1:0]              ERR_MSTR_reg;
   wire [2-1:0]             ERR_MSTR;
   
   reg [2-1:0]              S0_MSTR;
   reg                              S0_OK;

   
   
   
   assign                 Amatch_M0_ID0 = M0_AID == 4'b0011;
   assign                 Amatch_M1_ID0 = M1_AID == 4'b0010;
   assign                 Amatch_M2_ID0 = M2_AID == 4'b1010;
   
   assign                 match_S0_M0_ID0 = S0_ID == 4'b0011;
   assign                 match_S0_M1_ID0 = S0_ID == 4'b0010;
   assign                 match_S0_M2_ID0 = S0_ID == 4'b1010;

           
   assign                 cmd_push_M0           = M0_AVALID & M0_AREADY;
   assign                 cmd_push_M1           = M1_AVALID & M1_AREADY;
   assign                 cmd_push_M2           = M2_AVALID & M2_AREADY;
   assign                 cmd_push_M0_ID0 = cmd_push_M0 & Amatch_M0_ID0;
   assign                 cmd_push_M1_ID0 = cmd_push_M1 & Amatch_M1_ID0;
   assign                 cmd_push_M2_ID0 = cmd_push_M2 & Amatch_M2_ID0;
   assign                 cmd_pop_S0            = S0_VALID & S0_READY & S0_LAST;
   
  assign                 cmd_pop_M0_ID0 = (cmd_pop_S0 & match_S0_M0_ID0) ;
  assign                 cmd_pop_M1_ID0 = (cmd_pop_S0 & match_S0_M1_ID0) ;
  assign                 cmd_pop_M2_ID0 = (cmd_pop_S0 & match_S0_M2_ID0) ;
       
  assign                           slave_in_M0_ID0 = M0_ASLV;
  assign                           slave_in_M1_ID0 = M1_ASLV;
  assign                           slave_in_M2_ID0 = M2_ASLV;


   assign                 ERR_MSTR = 'd0;

   
   always @(*)                                               
     begin                                                                     
    case (S0_ID)                                            
      4'b0011 : S0_MSTR = 2'd0;
      4'b0010 : S0_MSTR = 2'd1;
      4'b1010 : S0_MSTR = 2'd2;
      default : S0_MSTR = ERR_MSTR;                                      
    endcase                                                                
     end                                                                       
   
   always @(*)                                                                  
     begin                                                                     
    case (S0_ID)                                           
      4'b0011 : S0_OK = slave_out_M0_ID0 == 1'd0;
      4'b0010 : S0_OK = slave_out_M1_ID0 == 1'd0;
      4'b1010 : S0_OK = slave_out_M2_ID0 == 1'd0;
      default : S0_OK = 1'b1; //SLVERR                                   
    endcase                                                                
     end                                                                       

   prgen_fifo #(1, 4)
   slave_fifo_M0_ID0(
                       .clk(clk),                              
                       .reset(reset),                          
                       .push(cmd_push_M0_ID0),       
                       .pop(cmd_pop_M0_ID0),         
                       .din(slave_in_M0_ID0),        
                       .dout(slave_out_M0_ID0),      
               .empty(slave_empty_M0_ID0),   
               .full(slave_full_M0_ID0)      
                       );
   
   prgen_fifo #(1, 4)
   slave_fifo_M1_ID0(
                       .clk(clk),                              
                       .reset(reset),                          
                       .push(cmd_push_M1_ID0),       
                       .pop(cmd_pop_M1_ID0),         
                       .din(slave_in_M1_ID0),        
                       .dout(slave_out_M1_ID0),      
               .empty(slave_empty_M1_ID0),   
               .full(slave_full_M1_ID0)      
                       );
   
   prgen_fifo #(1, 4)
   slave_fifo_M2_ID0(
                       .clk(clk),                              
                       .reset(reset),                          
                       .push(cmd_push_M2_ID0),       
                       .pop(cmd_pop_M2_ID0),         
                       .din(slave_in_M2_ID0),        
                       .dout(slave_out_M2_ID0),      
               .empty(slave_empty_M2_ID0),   
               .full(slave_full_M2_ID0)      
                       );
   
   

endmodule

   




//------------------------------------------------------------------
//-- File generated by RobustVerilog parser
//-- RobustVerilog version 1.5g (limited free version) Jul 5 2011
//-- Invoked Wed Mar 28 12:55:30 2012
//-- Source file: ic.v
//-- Parent file: axi_master.v
//-- Project directory: C:/Users/MARIOS/Desktop/VLSI/RobustVerilog_free1.5_win/RobustVerilog_free1.5_win/examples/axi_master/trunk/run/
//-- Target directory: out/
//-- Command flags: ..\..\..\..\robust.exe ../robust_axi_master.pro -gui 
//-- www.provartec.com/edatools ... info@provartec.com
//------------------------------------------------------------------

/*///////////////////////////////////////////////////////////////////
////                                                             ////
////  Author: Eyal Hochberg                                      ////
////          eyal@provartec.com                                 ////
////                                                             ////
////  Downloaded from: http://www.opencores.org                  ////
/////////////////////////////////////////////////////////////////////
////                                                             ////
//// Copyright (C) 2010 Provartec LTD                            ////
//// www.provartec.com                                           ////
//// info@provartec.com                                          ////
////                                                             ////
//// This source file may be used and distributed without        ////
//// restriction provided that this copyright statement is not   ////
//// removed from the file and that any derivative work contains ////
//// the original copyright notice and the associated disclaimer.////
////                                                             ////
//// This source file is free software; you can redistribute it  ////
//// and/or modify it under the terms of the GNU Lesser General  ////
//// Public License as published by the Free Software Foundation.////
////                                                             ////
//// This source is distributed in the hope that it will be      ////
//// useful, but WITHOUT ANY WARRANTY; without even the implied  ////
//// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR     ////
//// PURPOSE.  See the GNU Lesser General Public License for more////
//// details. http://www.gnu.org/licenses/lgpl.html              ////
////                                                             ////
///////////////////////////////////////////////////////////////////*/



  


module  axi_master_ic (clk,reset,M0_AWID,M0_AWADDR,M0_AWLEN,M0_AWSIZE,M0_AWBURST,M0_AWCACHE,M0_AWPROT,M0_AWLOCK,M0_AWVALID,M0_AWREADY,M0_WID,M0_WDATA,M0_WSTRB,M0_WLAST,M0_WVALID,M0_WREADY,M0_BID,M0_BRESP,M0_BVALID,M0_BREADY,M0_ARID,M0_ARADDR,M0_ARLEN,M0_ARSIZE,M0_ARBURST,M0_ARCACHE,M0_ARPROT,M0_ARLOCK,M0_ARVALID,M0_ARREADY,M0_RID,M0_RDATA,M0_RRESP,M0_RLAST,M0_RVALID,M0_RREADY,M1_AWID,M1_AWADDR,M1_AWLEN,M1_AWSIZE,M1_AWBURST,M1_AWCACHE,M1_AWPROT,M1_AWLOCK,M1_AWVALID,M1_AWREADY,M1_WID,M1_WDATA,M1_WSTRB,M1_WLAST,M1_WVALID,M1_WREADY,M1_BID,M1_BRESP,M1_BVALID,M1_BREADY,M1_ARID,M1_ARADDR,M1_ARLEN,M1_ARSIZE,M1_ARBURST,M1_ARCACHE,M1_ARPROT,M1_ARLOCK,M1_ARVALID,M1_ARREADY,M1_RID,M1_RDATA,M1_RRESP,M1_RLAST,M1_RVALID,M1_RREADY,M2_AWID,M2_AWADDR,M2_AWLEN,M2_AWSIZE,M2_AWBURST,M2_AWCACHE,M2_AWPROT,M2_AWLOCK,M2_AWVALID,M2_AWREADY,M2_WID,M2_WDATA,M2_WSTRB,M2_WLAST,M2_WVALID,M2_WREADY,M2_BID,M2_BRESP,M2_BVALID,M2_BREADY,M2_ARID,M2_ARADDR,M2_ARLEN,M2_ARSIZE,M2_ARBURST,M2_ARCACHE,M2_ARPROT,M2_ARLOCK,M2_ARVALID,M2_ARREADY,M2_RID,M2_RDATA,M2_RRESP,M2_RLAST,M2_RVALID,M2_RREADY,S0_AWID,S0_AWADDR,S0_AWLEN,S0_AWSIZE,S0_AWBURST,S0_AWCACHE,S0_AWPROT,S0_AWLOCK,S0_AWVALID,S0_AWREADY,S0_WID,S0_WDATA,S0_WSTRB,S0_WLAST,S0_WVALID,S0_WREADY,S0_BID,S0_BRESP,S0_BVALID,S0_BREADY,S0_ARID,S0_ARADDR,S0_ARLEN,S0_ARSIZE,S0_ARBURST,S0_ARCACHE,S0_ARPROT,S0_ARLOCK,S0_ARVALID,S0_ARREADY,S0_RID,S0_RDATA,S0_RRESP,S0_RLAST,S0_RVALID,S0_RREADY); 

   input                       clk;
   input                       reset;

   input [3:0]                M0_AWID;
   input [31:0]               M0_AWADDR;
   input [3:0]                M0_AWLEN;
   input [1:0]                M0_AWSIZE;
   input [1:0]                M0_AWBURST;
   input [3:0]                M0_AWCACHE;
   input [2:0]                M0_AWPROT;
   input [1:0]                M0_AWLOCK;
   input                      M0_AWVALID;
   output                     M0_AWREADY;
   input [3:0]                M0_WID;
   input [31:0]               M0_WDATA;
   input [32/8-1:0]           M0_WSTRB;
   input                      M0_WLAST;
   input                      M0_WVALID;
   output                     M0_WREADY;
   output [3:0]               M0_BID;
   output [1:0]               M0_BRESP;
   output                     M0_BVALID;
   input                      M0_BREADY;
   input [3:0]                M0_ARID;
   input [31:0]               M0_ARADDR;
   input [3:0]                M0_ARLEN;
   input [1:0]                M0_ARSIZE;
   input [1:0]                M0_ARBURST;
   input [3:0]                M0_ARCACHE;
   input [2:0]                M0_ARPROT;
   input [1:0]                M0_ARLOCK;
   input                      M0_ARVALID;
   output                     M0_ARREADY;
   output [3:0]               M0_RID;
   output [31:0]              M0_RDATA;
   output [1:0]               M0_RRESP;
   output                     M0_RLAST;
   output                     M0_RVALID;
   input                      M0_RREADY;
   input [3:0]                M1_AWID;
   input [31:0]               M1_AWADDR;
   input [3:0]                M1_AWLEN;
   input [1:0]                M1_AWSIZE;
   input [1:0]                M1_AWBURST;
   input [3:0]                M1_AWCACHE;
   input [2:0]                M1_AWPROT;
   input [1:0]                M1_AWLOCK;
   input                      M1_AWVALID;
   output                     M1_AWREADY;
   input [3:0]                M1_WID;
   input [31:0]               M1_WDATA;
   input [32/8-1:0]           M1_WSTRB;
   input                      M1_WLAST;
   input                      M1_WVALID;
   output                     M1_WREADY;
   output [3:0]               M1_BID;
   output [1:0]               M1_BRESP;
   output                     M1_BVALID;
   input                      M1_BREADY;
   input [3:0]                M1_ARID;
   input [31:0]               M1_ARADDR;
   input [3:0]                M1_ARLEN;
   input [1:0]                M1_ARSIZE;
   input [1:0]                M1_ARBURST;
   input [3:0]                M1_ARCACHE;
   input [2:0]                M1_ARPROT;
   input [1:0]                M1_ARLOCK;
   input                      M1_ARVALID;
   output                     M1_ARREADY;
   output [3:0]               M1_RID;
   output [31:0]              M1_RDATA;
   output [1:0]               M1_RRESP;
   output                     M1_RLAST;
   output                     M1_RVALID;
   input                      M1_RREADY;
   input [3:0]                M2_AWID;
   input [31:0]               M2_AWADDR;
   input [3:0]                M2_AWLEN;
   input [1:0]                M2_AWSIZE;
   input [1:0]                M2_AWBURST;
   input [3:0]                M2_AWCACHE;
   input [2:0]                M2_AWPROT;
   input [1:0]                M2_AWLOCK;
   input                      M2_AWVALID;
   output                     M2_AWREADY;
   input [3:0]                M2_WID;
   input [31:0]               M2_WDATA;
   input [32/8-1:0]           M2_WSTRB;
   input                      M2_WLAST;
   input                      M2_WVALID;
   output                     M2_WREADY;
   output [3:0]               M2_BID;
   output [1:0]               M2_BRESP;
   output                     M2_BVALID;
   input                      M2_BREADY;
   input [3:0]                M2_ARID;
   input [31:0]               M2_ARADDR;
   input [3:0]                M2_ARLEN;
   input [1:0]                M2_ARSIZE;
   input [1:0]                M2_ARBURST;
   input [3:0]                M2_ARCACHE;
   input [2:0]                M2_ARPROT;
   input [1:0]                M2_ARLOCK;
   input                      M2_ARVALID;
   output                     M2_ARREADY;
   output [3:0]               M2_RID;
   output [31:0]              M2_RDATA;
   output [1:0]               M2_RRESP;
   output                     M2_RLAST;
   output                     M2_RVALID;
   input                      M2_RREADY;
   output [3:0]                  S0_AWID;
   output [31:0]                 S0_AWADDR;
   output [3:0]                  S0_AWLEN;
   output [1:0]                  S0_AWSIZE;
   output [1:0]                  S0_AWBURST;
   output [3:0]                  S0_AWCACHE;
   output [2:0]                  S0_AWPROT;
   output [1:0]                  S0_AWLOCK;
   output                        S0_AWVALID;
   input                         S0_AWREADY;
   output [3:0]                  S0_WID;
   output [31:0]                 S0_WDATA;
   output [32/8-1:0]             S0_WSTRB;
   output                        S0_WLAST;
   output                        S0_WVALID;
   input                         S0_WREADY;
   input [3:0]                   S0_BID;
   input [1:0]                   S0_BRESP;
   input                         S0_BVALID;
   output                        S0_BREADY;
   output [3:0]                  S0_ARID;
   output [31:0]                 S0_ARADDR;
   output [3:0]                  S0_ARLEN;
   output [1:0]                  S0_ARSIZE;
   output [1:0]                  S0_ARBURST;
   output [3:0]                  S0_ARCACHE;
   output [2:0]                  S0_ARPROT;
   output [1:0]                  S0_ARLOCK;
   output                        S0_ARVALID;
   input                         S0_ARREADY;
   input [3:0]                   S0_RID;
   input [31:0]                  S0_RDATA;
   input [1:0]                   S0_RRESP;
   input                         S0_RLAST;
   input                         S0_RVALID;
   output                        S0_RREADY;
  
   wire [0:0]               M0_AWSLV;
   wire [0:0]               M1_AWSLV;
   wire [0:0]               M2_AWSLV;
   wire [0:0]               M0_ARSLV;
   wire [0:0]               M1_ARSLV;
   wire [0:0]               M2_ARSLV;
   
   wire [1:0]               S0_AWMSTR;
   wire [1:0]               S0_ARMSTR;
   wire                       S0_AWIDOK;
   wire                       S0_ARIDOK;

   
   wire [3:0]              M0_AWID_FULL;
   wire [3:0]              M1_AWID_FULL;
   wire [3:0]              M2_AWID_FULL;
   wire [3:0]              M0_ARID_FULL;
   wire [3:0]              M1_ARID_FULL;
   wire [3:0]              M2_ARID_FULL;
   wire [3:0]              M0_WID_FULL;
   wire [3:0]              M1_WID_FULL;
   wire [3:0]              M2_WID_FULL;
   wire [3:0]              M0_BID_FULL;
   wire [3:0]              M1_BID_FULL;
   wire [3:0]              M2_BID_FULL;
   wire [3:0]              M0_RID_FULL;
   wire [3:0]              M1_RID_FULL;
   wire [3:0]              M2_RID_FULL;
   
   assign                                     M0_AWID_FULL = M0_AWID;
   assign                                     M1_AWID_FULL = M1_AWID;
   assign                                     M2_AWID_FULL = M2_AWID;
   assign                                     M0_WID_FULL  = M0_WID;
   assign                                     M1_WID_FULL  = M1_WID;
   assign                                     M2_WID_FULL  = M2_WID;
   assign                                     M0_ARID_FULL = M0_ARID;
   assign                                     M1_ARID_FULL = M1_ARID;
   assign                                     M2_ARID_FULL = M2_ARID;
   assign                                     M0_RID       = M0_RID_FULL;
   assign                                     M1_RID       = M1_RID_FULL;
   assign                                     M2_RID       = M2_RID_FULL;
   assign                                     M0_BID       = M0_BID_FULL;
   assign                                     M1_BID       = M1_BID_FULL;
   assign                                     M2_BID       = M2_BID_FULL;
   
   
   axi_master_ic_addr
   axi_master_ic_addr_rd (.clk(clk),
              .reset(reset),
              .M0_ASLV(M0_ARSLV),
              .M1_ASLV(M1_ARSLV),
              .M2_ASLV(M2_ARSLV),
                      .M0_AID(M0_ARID_FULL),
                      .M1_AID(M1_ARID_FULL),
                      .M2_AID(M2_ARID_FULL),
              .M0_AADDR(M0_ARADDR),
              .M0_ALEN(M0_ARLEN),
              .M0_ASIZE(M0_ARSIZE),
              .M0_ABURST(M0_ARBURST),
              .M0_ACACHE(M0_ARCACHE),
              .M0_APROT(M0_ARPROT),
              .M0_ALOCK(M0_ARLOCK),
              .M0_AVALID(M0_ARVALID),
              .M0_AREADY(M0_ARREADY),
              .M1_AADDR(M1_ARADDR),
              .M1_ALEN(M1_ARLEN),
              .M1_ASIZE(M1_ARSIZE),
              .M1_ABURST(M1_ARBURST),
              .M1_ACACHE(M1_ARCACHE),
              .M1_APROT(M1_ARPROT),
              .M1_ALOCK(M1_ARLOCK),
              .M1_AVALID(M1_ARVALID),
              .M1_AREADY(M1_ARREADY),
              .M2_AADDR(M2_ARADDR),
              .M2_ALEN(M2_ARLEN),
              .M2_ASIZE(M2_ARSIZE),
              .M2_ABURST(M2_ARBURST),
              .M2_ACACHE(M2_ARCACHE),
              .M2_APROT(M2_ARPROT),
              .M2_ALOCK(M2_ARLOCK),
              .M2_AVALID(M2_ARVALID),
              .M2_AREADY(M2_ARREADY),
              .S0_AMSTR(S0_ARMSTR),
              .S0_AIDOK(S0_ARIDOK),
              .S0_AID(S0_ARID),
              .S0_AADDR(S0_ARADDR),
              .S0_ALEN(S0_ARLEN),
              .S0_ASIZE(S0_ARSIZE),
              .S0_ABURST(S0_ARBURST),
              .S0_ACACHE(S0_ARCACHE),
              .S0_APROT(S0_ARPROT),
              .S0_ALOCK(S0_ARLOCK),
              .S0_AVALID(S0_ARVALID),
              .S0_AREADY(S0_ARREADY)
              );

   
   axi_master_ic_addr
   axi_master_ic_addr_wr (
              .clk(clk),
              .reset(reset),
              .M0_ASLV(M0_AWSLV),
              .M1_ASLV(M1_AWSLV),
              .M2_ASLV(M2_AWSLV),
                      .M0_AID(M0_AWID_FULL),
                      .M1_AID(M1_AWID_FULL),
                      .M2_AID(M2_AWID_FULL),
              .M0_AADDR(M0_AWADDR),
              .M0_ALEN(M0_AWLEN),
              .M0_ASIZE(M0_AWSIZE),
              .M0_ABURST(M0_AWBURST),
              .M0_ACACHE(M0_AWCACHE),
              .M0_APROT(M0_AWPROT),
              .M0_ALOCK(M0_AWLOCK),
              .M0_AVALID(M0_AWVALID),
              .M0_AREADY(M0_AWREADY),
              .M1_AADDR(M1_AWADDR),
              .M1_ALEN(M1_AWLEN),
              .M1_ASIZE(M1_AWSIZE),
              .M1_ABURST(M1_AWBURST),
              .M1_ACACHE(M1_AWCACHE),
              .M1_APROT(M1_AWPROT),
              .M1_ALOCK(M1_AWLOCK),
              .M1_AVALID(M1_AWVALID),
              .M1_AREADY(M1_AWREADY),
              .M2_AADDR(M2_AWADDR),
              .M2_ALEN(M2_AWLEN),
              .M2_ASIZE(M2_AWSIZE),
              .M2_ABURST(M2_AWBURST),
              .M2_ACACHE(M2_AWCACHE),
              .M2_APROT(M2_AWPROT),
              .M2_ALOCK(M2_AWLOCK),
              .M2_AVALID(M2_AWVALID),
              .M2_AREADY(M2_AWREADY),
              .S0_AMSTR(S0_AWMSTR),
              .S0_AIDOK(S0_AWIDOK),
              .S0_AID(S0_AWID),
              .S0_AADDR(S0_AWADDR),
              .S0_ALEN(S0_AWLEN),
              .S0_ASIZE(S0_AWSIZE),
              .S0_ABURST(S0_AWBURST),
              .S0_ACACHE(S0_AWCACHE),
              .S0_APROT(S0_AWPROT),
              .S0_ALOCK(S0_AWLOCK),
              .S0_AVALID(S0_AWVALID),
              .S0_AREADY(S0_AWREADY)
              );

   
   axi_master_ic_resp
   axi_master_ic_rresp (
            .clk(clk),
            .reset(reset),
                    .M0_AID(M0_ARID_FULL),
                    .M1_AID(M1_ARID_FULL),
                    .M2_AID(M2_ARID_FULL),
                    .M0_ID(M0_RID_FULL),
                    .M1_ID(M1_RID_FULL),
                    .M2_ID(M2_RID_FULL),
            .M0_ASLV(M0_ARSLV),
            .M0_AVALID(M0_ARVALID),
            .M0_AREADY(M0_ARREADY),
            .M1_ASLV(M1_ARSLV),
            .M1_AVALID(M1_ARVALID),
            .M1_AREADY(M1_ARREADY),
            .M2_ASLV(M2_ARSLV),
            .M2_AVALID(M2_ARVALID),
            .M2_AREADY(M2_ARREADY),
            .M0_DATA(M0_RDATA),
            .M0_RESP(M0_RRESP),
            .M0_LAST(M0_RLAST),
            .M0_VALID(M0_RVALID),
            .M0_READY(M0_RREADY),
            .M1_DATA(M1_RDATA),
            .M1_RESP(M1_RRESP),
            .M1_LAST(M1_RLAST),
            .M1_VALID(M1_RVALID),
            .M1_READY(M1_RREADY),
            .M2_DATA(M2_RDATA),
            .M2_RESP(M2_RRESP),
            .M2_LAST(M2_RLAST),
            .M2_VALID(M2_RVALID),
            .M2_READY(M2_RREADY),
            .S0_ID(S0_RID),
            .S0_DATA(S0_RDATA),
            .S0_RESP(S0_RRESP),
            .S0_LAST(S0_RLAST),
            .S0_VALID(S0_RVALID),
            .S0_READY(S0_RREADY)
            );

   
   axi_master_ic_wdata
   axi_master_ic_wdata (
            .clk(clk),
            .reset(reset),
                    .M0_AWID(M0_AWID_FULL),
                    .M1_AWID(M1_AWID_FULL),
                    .M2_AWID(M2_AWID_FULL),
                    .M0_WID(M0_WID_FULL),
                    .M1_WID(M1_WID_FULL),
                    .M2_WID(M2_WID_FULL),
            .M0_AWSLV(M0_AWSLV),
            .M0_AWVALID(M0_AWVALID),
            .M0_AWREADY(M0_AWREADY),
            .M1_AWSLV(M1_AWSLV),
            .M1_AWVALID(M1_AWVALID),
            .M1_AWREADY(M1_AWREADY),
            .M2_AWSLV(M2_AWSLV),
            .M2_AWVALID(M2_AWVALID),
            .M2_AWREADY(M2_AWREADY),
            .M0_WDATA(M0_WDATA),
            .M0_WSTRB(M0_WSTRB),
            .M0_WLAST(M0_WLAST),
            .M0_WVALID(M0_WVALID),
            .M0_WREADY(M0_WREADY),
            .M1_WDATA(M1_WDATA),
            .M1_WSTRB(M1_WSTRB),
            .M1_WLAST(M1_WLAST),
            .M1_WVALID(M1_WVALID),
            .M1_WREADY(M1_WREADY),
            .M2_WDATA(M2_WDATA),
            .M2_WSTRB(M2_WSTRB),
            .M2_WLAST(M2_WLAST),
            .M2_WVALID(M2_WVALID),
            .M2_WREADY(M2_WREADY),
            .S0_WID(S0_WID),
            .S0_WDATA(S0_WDATA),
            .S0_WSTRB(S0_WSTRB),
            .S0_WLAST(S0_WLAST),
            .S0_WVALID(S0_WVALID),
            .S0_WREADY(S0_WREADY),
                .S0_AWVALID(S0_AWVALID),
                .S0_AWREADY(S0_AWREADY),
            .S0_AWMSTR(S0_AWMSTR)
            );

   
   axi_master_ic_resp
   axi_master_ic_bresp (
            .clk(clk),
            .reset(reset),
                    .M0_AID(M0_AWID_FULL),
                    .M1_AID(M1_AWID_FULL),
                    .M2_AID(M2_AWID_FULL),
                    .M0_ID(M0_BID_FULL),
                    .M1_ID(M1_BID_FULL),
                    .M2_ID(M2_BID_FULL),
            .M0_ASLV(M0_AWSLV),
            .M0_AVALID(M0_AWVALID),
            .M0_AREADY(M0_AWREADY),
            .M1_ASLV(M1_AWSLV),
            .M1_AVALID(M1_AWVALID),
            .M1_AREADY(M1_AWREADY),
            .M2_ASLV(M2_AWSLV),
            .M2_AVALID(M2_AWVALID),
            .M2_AREADY(M2_AWREADY),
            .M0_RESP(M0_BRESP),
            .M0_VALID(M0_BVALID),
            .M0_READY(M0_BREADY),
            .M1_RESP(M1_BRESP),
            .M1_VALID(M1_BVALID),
            .M1_READY(M1_BREADY),
            .M2_RESP(M2_BRESP),
            .M2_VALID(M2_BVALID),
            .M2_READY(M2_BREADY),
            .M0_DATA(),
            .M1_DATA(),
            .M2_DATA(),
            .M0_LAST(),
            .M1_LAST(),
            .M2_LAST(),
            .S0_ID(S0_BID),
            .S0_RESP(S0_BRESP),
            .S0_VALID(S0_BVALID),
            .S0_READY(S0_BREADY),
            .S0_DATA({32{1'b0}}),
            .S0_LAST(1'b1)
            );
   
   
      
      
     endmodule









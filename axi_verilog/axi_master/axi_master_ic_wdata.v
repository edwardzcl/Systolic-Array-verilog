//------------------------------------------------------------------
//-- File generated by RobustVerilog parser
//-- RobustVerilog version 1.5g (limited free version) Jul 5 2011
//-- Invoked Wed Mar 28 12:55:31 2012
//-- Source file: ic_wdata.v
//-- Parent file: ic.v
//-- Project directory: C:/Users/MARIOS/Desktop/VLSI/RobustVerilog_free1.5_win/RobustVerilog_free1.5_win/examples/axi_master/trunk/run/
//-- Target directory: out/
//-- Command flags: ..\..\..\..\robust.exe ../robust_axi_master.pro -gui 
//-- www.provartec.com/edatools ... info@provartec.com
//------------------------------------------------------------------




  


module axi_master_ic_wdata (clk,reset,M0_AWSLV,M0_AWID,M0_AWVALID,M0_AWREADY,M1_AWSLV,M1_AWID,M1_AWVALID,M1_AWREADY,M2_AWSLV,M2_AWID,M2_AWVALID,M2_AWREADY,M0_WID,M0_WDATA,M0_WSTRB,M0_WLAST,M0_WVALID,M0_WREADY,M1_WID,M1_WDATA,M1_WSTRB,M1_WLAST,M1_WVALID,M1_WREADY,M2_WID,M2_WDATA,M2_WSTRB,M2_WLAST,M2_WVALID,M2_WREADY,S0_WID,S0_WDATA,S0_WSTRB,S0_WLAST,S0_WVALID,S0_WREADY,S0_AWVALID,S0_AWREADY,S0_AWMSTR);

   parameter                   STRB_BITS  = 32/8;
   
   input                                  clk;
   input                                  reset;
   
   input [1-1:0]                        M0_AWSLV;
   input [3:0]                M0_AWID;
   input                      M0_AWVALID;
   input                      M0_AWREADY;
   input [1-1:0]                        M1_AWSLV;
   input [3:0]                M1_AWID;
   input                      M1_AWVALID;
   input                      M1_AWREADY;
   input [1-1:0]                        M2_AWSLV;
   input [3:0]                M2_AWID;
   input                      M2_AWVALID;
   input                      M2_AWREADY;
   input [3:0]                    M0_WID;
   input [31:0]                   M0_WDATA;
   input [32/8-1:0]               M0_WSTRB;
   input                          M0_WLAST;
   input                          M0_WVALID;
   output                         M0_WREADY;
   input [3:0]                    M1_WID;
   input [31:0]                   M1_WDATA;
   input [32/8-1:0]               M1_WSTRB;
   input                          M1_WLAST;
   input                          M1_WVALID;
   output                         M1_WREADY;
   input [3:0]                    M2_WID;
   input [31:0]                   M2_WDATA;
   input [32/8-1:0]               M2_WSTRB;
   input                          M2_WLAST;
   input                          M2_WVALID;
   output                         M2_WREADY;
   output [3:0]                  S0_WID;
   output [31:0]                 S0_WDATA;
   output [32/8-1:0]             S0_WSTRB;
   output                        S0_WLAST;
   output                        S0_WVALID;
   input                         S0_WREADY;
   input                                  S0_AWVALID;
   input                                  S0_AWREADY;
   input [2-1:0]                  S0_AWMSTR;


   parameter                              WBUS_WIDTH = 4  + 32  + 32/8  + 1  + 1 ;

   
   wire [WBUS_WIDTH-1:0]                  S0_WBUS;
   
   wire [WBUS_WIDTH-1:0]                  M0_WBUS;
   wire [WBUS_WIDTH-1:0]                  M1_WBUS;
   wire [WBUS_WIDTH-1:0]                  M2_WBUS;
   
   wire [1-1:0]                    M0_WSLV;
   wire [1-1:0]                    M1_WSLV;
   wire [1-1:0]                    M2_WSLV;
   wire                                   M0_WOK;
   wire                                   M1_WOK;
   wire                                   M2_WOK;
   
   wire                                   S0_M0;
   wire                                   S0_M1;
   wire                                   S0_M2;

   


   axi_master_ic_registry_wr
     axi_master_ic_registry_wr (
                .clk(clk),
                .reset(reset),
                .M0_AWSLV(M0_AWSLV),
                .M1_AWSLV(M1_AWSLV),
                .M2_AWSLV(M2_AWSLV),
                .M0_AWID(M0_AWID),
                .M1_AWID(M1_AWID),
                .M2_AWID(M2_AWID),
                .M0_AWVALID(M0_AWVALID),
                .M1_AWVALID(M1_AWVALID),
                .M2_AWVALID(M2_AWVALID),
                .M0_AWREADY(M0_AWREADY),
                .M1_AWREADY(M1_AWREADY),
                .M2_AWREADY(M2_AWREADY),
                .M0_WID(M0_WID),
                .M1_WID(M1_WID),
                .M2_WID(M2_WID),
                .M0_WVALID(M0_WVALID),
                .M1_WVALID(M1_WVALID),
                .M2_WVALID(M2_WVALID),
                .M0_WREADY(M0_WREADY),
                .M1_WREADY(M1_WREADY),
                .M2_WREADY(M2_WREADY),
                .M0_WLAST(M0_WLAST),
                .M1_WLAST(M1_WLAST),
                .M2_WLAST(M2_WLAST),
                .M0_WSLV(M0_WSLV),
                .M1_WSLV(M1_WSLV),
                .M2_WSLV(M2_WSLV),
                .M0_WOK(M0_WOK),
                .M1_WOK(M1_WOK),
                .M2_WOK(M2_WOK),
                    .S0_AWVALID(S0_AWVALID),
                    .S0_AWREADY(S0_AWREADY),
                .S0_AWMSTR(S0_AWMSTR),
                    .S0_WVALID(S0_WVALID),
                    .S0_WREADY(S0_WREADY),
                    .S0_WLAST(S0_WLAST)
                );


   
   assign                 S0_M0  = (M0_WSLV == 'd0) & M0_WOK & M0_WVALID;
   assign                 S0_M1  = (M1_WSLV == 'd0) & M1_WOK & M1_WVALID;
   assign                 S0_M2  = (M2_WSLV == 'd0) & M2_WOK & M2_WVALID;
   
   assign                 M0_WBUS = {M0_WID  , M0_WDATA  , M0_WSTRB  , M0_WLAST  , M0_WVALID };
   assign                 M1_WBUS = {M1_WID  , M1_WDATA  , M1_WSTRB  , M1_WLAST  , M1_WVALID };
   assign                 M2_WBUS = {M2_WID  , M2_WDATA  , M2_WSTRB  , M2_WLAST  , M2_WVALID };

   assign                 S0_WBUS = (M2_WBUS & {WBUS_WIDTH{S0_M2}})  | (M1_WBUS & {WBUS_WIDTH{S0_M1}})  | (M0_WBUS & {WBUS_WIDTH{S0_M0}}) ;

   assign                               {S0_WID  , S0_WDATA  , S0_WSTRB  , S0_WLAST  , S0_WVALID } = S0_WBUS;
   
   assign                 M0_WREADY =           
                    S0_M0 ? S0_WREADY : 
                    1'b0;
   
   assign                 M1_WREADY =           
                    S0_M1 ? S0_WREADY : 
                    1'b0;
   
   assign                 M2_WREADY =           
                    S0_M2 ? S0_WREADY : 
                    1'b0;
   
   
endmodule







//------------------------------------------------------------------
//-- File generated by RobustVerilog parser
//-- RobustVerilog version 1.5g (limited free version) Jul 5 2011
//-- Invoked Wed Mar 28 12:55:31 2012
//-- Source file: ic_registry_wr.v
//-- Parent file: ic_wdata.v
//-- Project directory: C:/Users/MARIOS/Desktop/VLSI/RobustVerilog_free1.5_win/RobustVerilog_free1.5_win/examples/axi_master/trunk/run/
//-- Target directory: out/
//-- Command flags: ..\..\..\..\robust.exe ../robust_axi_master.pro -gui 
//-- www.provartec.com/edatools ... info@provartec.com
//------------------------------------------------------------------






module axi_master_ic_registry_wr(clk,reset,M0_AWSLV,M0_AWID,M0_AWVALID,M0_AWREADY,M1_AWSLV,M1_AWID,M1_AWVALID,M1_AWREADY,M2_AWSLV,M2_AWID,M2_AWVALID,M2_AWREADY,M0_WID,M1_WID,M2_WID,M0_WVALID,M1_WVALID,M2_WVALID,M0_WREADY,M1_WREADY,M2_WREADY,M0_WLAST,M1_WLAST,M2_WLAST,M0_WSLV,M1_WSLV,M2_WSLV,M0_WOK,M1_WOK,M2_WOK,S0_AWVALID,S0_AWREADY,S0_AWMSTR,S0_WVALID,S0_WREADY,S0_WLAST);
   

   
   input                 clk;
   input                 reset;

   input [1-1:0]                  M0_AWSLV;
   input [3:0]          M0_AWID;
   input                M0_AWVALID;
   input                M0_AWREADY;
   input [1-1:0]                  M1_AWSLV;
   input [3:0]          M1_AWID;
   input                M1_AWVALID;
   input                M1_AWREADY;
   input [1-1:0]                  M2_AWSLV;
   input [3:0]          M2_AWID;
   input                M2_AWVALID;
   input                M2_AWREADY;
   
   input [4-1:0]              M0_WID;
   input [4-1:0]              M1_WID;
   input [4-1:0]              M2_WID;
   input                 M0_WVALID; 
   input                 M1_WVALID; 
   input                 M2_WVALID; 
   input                 M0_WREADY; 
   input                 M1_WREADY; 
   input                 M2_WREADY; 
   input                 M0_WLAST; 
   input                 M1_WLAST; 
   input                 M2_WLAST; 
   output [1-1:0]            M0_WSLV;
   output [1-1:0]            M1_WSLV;
   output [1-1:0]            M2_WSLV;
   output                 M0_WOK;
   output                 M1_WOK;
   output                 M2_WOK;
   
   input                 S0_AWVALID;
   input                 S0_AWREADY;
   input [2-1:0]            S0_AWMSTR;
   input                 S0_WVALID;
   input                 S0_WREADY;
   input                 S0_WLAST;
   
   
   wire                 AWmatch_M0_ID0;
   wire                 AWmatch_M1_ID0;
   wire                 AWmatch_M2_ID0;
   wire                 Wmatch_M0_ID0;
   wire                 Wmatch_M1_ID0;
   wire                 Wmatch_M2_ID0;

   wire                 cmd_push_M0;
   wire                 cmd_push_M1;
   wire                 cmd_push_M2;
   wire                 cmd_push_M0_ID0;
   wire                 cmd_push_M1_ID0;
   wire                 cmd_push_M2_ID0;
   
   wire                 cmd_pop_M0;
   wire                 cmd_pop_M1;
   wire                 cmd_pop_M2;
   wire                 cmd_pop_M0_ID0;
   wire                 cmd_pop_M1_ID0;
   wire                 cmd_pop_M2_ID0;

   wire                             slave_empty_M0;
   wire                             slave_empty_M1;
   wire                             slave_empty_M2;
   wire [1-1:0]              slave_in_M0_ID0;
   wire [1-1:0]              slave_in_M1_ID0;
   wire [1-1:0]              slave_in_M2_ID0;
   wire [1-1:0]              slave_out_M0_ID0;
   wire [1-1:0]              slave_out_M1_ID0;
   wire [1-1:0]              slave_out_M2_ID0;
   wire                 slave_empty_M0_ID0;
   wire                 slave_empty_M1_ID0;
   wire                 slave_empty_M2_ID0;
   wire                 slave_full_M0_ID0;
   wire                 slave_full_M1_ID0;
   wire                 slave_full_M2_ID0;

   wire                 cmd_push_S0;
   wire                 cmd_pop_S0;
   wire [2-1:0]             master_in_S0;
   wire [2-1:0]             master_out_S0;
   wire                 master_empty_S0;
   wire                 master_full_S0;
   
   reg [1-1:0]               M0_WSLV;
   reg [1-1:0]               M1_WSLV;
   reg [1-1:0]               M2_WSLV;
   reg                     M0_WOK;
   reg                     M1_WOK;
   reg                     M2_WOK;

   reg                              M0_pending;
   reg                              M1_pending;
   reg                              M2_pending;
   reg                              M0_pending_d;
   reg                              M1_pending_d;
   reg                              M2_pending_d;
   wire                             M0_pending_rise;
   wire                             M1_pending_rise;
   wire                             M2_pending_rise;
   reg                              S0_pending;
   reg                              S0_pending_d;
   wire                             S0_pending_rise;
   
   
   
   assign                           AWmatch_M0_ID0  = M0_AWID == 4'b0011;
   assign                           AWmatch_M1_ID0  = M1_AWID == 4'b0010;
   assign                           AWmatch_M2_ID0  = M2_AWID == 4'b1010;
      
   assign                 Wmatch_M0_ID0   = M0_WID == 4'b0011;
   assign                 Wmatch_M1_ID0   = M1_WID == 4'b0010;
   assign                 Wmatch_M2_ID0   = M2_WID == 4'b1010;
           
           
   assign                 cmd_push_M0           = M0_AWVALID & (M0_pending ? M0_pending_rise : M0_AWREADY);
   assign                 cmd_push_M1           = M1_AWVALID & (M1_pending ? M1_pending_rise : M1_AWREADY);
   assign                 cmd_push_M2           = M2_AWVALID & (M2_pending ? M2_pending_rise : M2_AWREADY);
   assign                 cmd_push_M0_ID0 = cmd_push_M0 & AWmatch_M0_ID0;
   assign                 cmd_push_M1_ID0 = cmd_push_M1 & AWmatch_M1_ID0;
   assign                 cmd_push_M2_ID0 = cmd_push_M2 & AWmatch_M2_ID0;
   assign                 cmd_pop_M0            = M0_WVALID & M0_WREADY & M0_WLAST;
   assign                 cmd_pop_M1            = M1_WVALID & M1_WREADY & M1_WLAST;
   assign                 cmd_pop_M2            = M2_WVALID & M2_WREADY & M2_WLAST;
   assign                  cmd_pop_M0_ID0  = cmd_pop_M0 & Wmatch_M0_ID0;
   assign                  cmd_pop_M1_ID0  = cmd_pop_M1 & Wmatch_M1_ID0;
   assign                  cmd_pop_M2_ID0  = cmd_pop_M2 & Wmatch_M2_ID0;

   assign                 cmd_push_S0           = S0_AWVALID & (S0_pending ? S0_pending_rise : S0_AWREADY);
   assign                 cmd_pop_S0            = S0_WVALID & S0_WREADY & S0_WLAST;
   assign                 master_in_S0          = S0_AWMSTR;
   
   assign                 slave_in_M0_ID0 = M0_AWSLV;
   assign                 slave_in_M1_ID0 = M1_AWSLV;
   assign                 slave_in_M2_ID0 = M2_AWSLV;


   assign                           M0_pending_rise = M0_pending & (~M0_pending_d);
   assign                           M1_pending_rise = M1_pending & (~M1_pending_d);
   assign                           M2_pending_rise = M2_pending & (~M2_pending_d);
   assign                           S0_pending_rise = S0_pending & (~S0_pending_d);
   
   always @(posedge clk or posedge reset)
     if (reset)
       begin
          M0_pending   <= #1 1'b0;
          M1_pending   <= #1 1'b0;
          M2_pending   <= #1 1'b0;
          M0_pending_d <= #1 1'b0;
          M1_pending_d <= #1 1'b0;
          M2_pending_d <= #1 1'b0;
          S0_pending   <= #1 1'b0;
          S0_pending_d <= #1 1'b0;
       end
     else
       begin
          M0_pending   <= #1 M0_AWVALID & (~M0_AWREADY);
          M1_pending   <= #1 M1_AWVALID & (~M1_AWREADY);
          M2_pending   <= #1 M2_AWVALID & (~M2_AWREADY);
          M0_pending_d <= #1 M0_pending;
          M1_pending_d <= #1 M1_pending;
          M2_pending_d <= #1 M2_pending;
          S0_pending   <= #1 S0_AWVALID & (~S0_AWREADY);
          S0_pending_d <= #1 S0_pending;
       end
   
   
   
   always @(*)                                                              
     begin                                                                 
    case (M0_WID)                                            
      4'b0011 : M0_WSLV = slave_out_M0_ID0;
      default : M0_WSLV = 0;                           
    endcase                                                            
     end   

   always @(*)                                                              
     begin                                                                 
    case (M0_WSLV)                                                   
      1'd0 : M0_WOK = (master_out_S0 == 2'd0) & (~slave_empty_M0);
      default : M0_WOK = 1'b0;                                       
    endcase                                                            
     end                                                                   

   always @(*)                                                              
     begin                                                                 
    case (M1_WID)                                            
      4'b0010 : M1_WSLV = slave_out_M1_ID0;
      default : M1_WSLV = 0;                           
    endcase                                                            
     end   

   always @(*)                                                              
     begin                                                                 
    case (M1_WSLV)                                                   
      1'd0 : M1_WOK = (master_out_S0 == 2'd1) & (~slave_empty_M1);
      default : M1_WOK = 1'b0;                                       
    endcase                                                            
     end                                                                   

   always @(*)                                                              
     begin                                                                 
    case (M2_WID)                                            
      4'b1010 : M2_WSLV = slave_out_M2_ID0;
      default : M2_WSLV = 0;                           
    endcase                                                            
     end   

   always @(*)                                                              
     begin                                                                 
    case (M2_WSLV)                                                   
      1'd0 : M2_WOK = (master_out_S0 == 2'd2) & (~slave_empty_M2);
      default : M2_WOK = 1'b0;                                       
    endcase                                                            
     end                                                                   

      
  assign slave_empty_M0 = slave_empty_M0_ID0 ;
   
   prgen_fifo #(1, 4)  
   slave_fifo_M0_ID0(
                       .clk(clk),                              
                       .reset(reset),                          
                       .push(cmd_push_M0_ID0),       
                       .pop(cmd_pop_M0_ID0),         
                       .din(slave_in_M0_ID0),        
                       .dout(slave_out_M0_ID0),      
               .empty(slave_empty_M0_ID0),   
               .full(slave_full_M0_ID0)      
                       );

  assign slave_empty_M1 = slave_empty_M1_ID0 ;
   
   prgen_fifo #(1, 4)  
   slave_fifo_M1_ID0(
                       .clk(clk),                              
                       .reset(reset),                          
                       .push(cmd_push_M1_ID0),       
                       .pop(cmd_pop_M1_ID0),         
                       .din(slave_in_M1_ID0),        
                       .dout(slave_out_M1_ID0),      
               .empty(slave_empty_M1_ID0),   
               .full(slave_full_M1_ID0)      
                       );

  assign slave_empty_M2 = slave_empty_M2_ID0 ;
   
   prgen_fifo #(1, 4)  
   slave_fifo_M2_ID0(
                       .clk(clk),                              
                       .reset(reset),                          
                       .push(cmd_push_M2_ID0),       
                       .pop(cmd_pop_M2_ID0),         
                       .din(slave_in_M2_ID0),        
                       .dout(slave_out_M2_ID0),      
               .empty(slave_empty_M2_ID0),   
               .full(slave_full_M2_ID0)      
                       );


    
   
   prgen_fifo #(2, 8)
   master_fifo_S0(                                            
           .clk(clk),                                   
           .reset(reset),                               
           .push(cmd_push_S0),                        
           .pop(cmd_pop_S0),                          
           .din(master_in_S0),                        
           .dout(master_out_S0),                      
           .empty(master_empty_S0),                   
           .full(master_full_S0)                      
           );                                           

   
endmodule

   



